{"version":3,"file":"process-schedule.js","sourceRoot":"","sources":["../../../../src/worker/jobs/process-schedule.js"],"names":[],"mappings":"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","sourcesContent":["import prisma from '../../lib/prisma.js';\nimport updateHeader from '../updateHeader.js';\nimport { addMinutes, isFuture } from 'date-fns';\nimport Sentry from '../../lib/sentry.js';\nimport { format, timeAt3am } from '../../lib/time.js';\nimport {\n    SUSPENDED_ACCOUNT,\n    RATE_LIMIT,\n    DISABLED_TOKEN,\n    IMAGE_ERROR,\n} from '../../lib/error.js';\n\nexport default async () => {\n    const now = new Date();\n\n    console.log(`Current time is ${format(now)}.`);\n\n    const jobs = await prisma.schedule.findMany({\n        where: {\n            active: true,\n            status: 'scheduled',\n            changeOn: {\n                lte: now,\n            },\n        },\n        include: {\n            user: true,\n        },\n    });\n\n\n    if (jobs.length === 0) {\n        console.log('No jobs to process.');\n        return;\n    }\n\n    console.log('Jobs found: ', jobs.length);\n\n    const updated = await prisma.schedule.updateMany({\n        data: {\n            status: 'processing',\n        },\n        where: {\n            active: true,\n            status: 'scheduled',\n            changeOn: {\n                lte: now,\n            },\n        },\n    });\n\n    if (updated.count !== jobs.length) {\n        // This maybe can happen? Very tough race condition but\n        // in a world where the findMany tasks is slower than 10s (job cycle).\n        Sentry.captureMessage(\n            'Well.. the updated count and the jobs length count did not match up.'\n        );\n    }\n\n    let completed = 0;\n\n    const queue = jobs.reduce(async (previous, job) => {\n        await previous;\n\n        const transaction = Sentry.startTransaction({\n            op: 'worker',\n            name: 'processHeader',\n        });\n\n        Sentry.setUser({\n            id: job.userId,\n            username: job.user.username,\n            twitterId: job.user.twitterId,\n            name: job.user.name,\n        });\n        Sentry.setContext({\n            utcOffset: job.user.utcOffset,\n            changeOn: job.changeOn\n        });\n\n        let changeOn = timeAt3am(job.user.utcOffset);\n        let active = undefined;\n        let failed = false;\n\n        try {\n            await updateHeader(job.user);\n        } catch (e) {\n            // if we hit rate limit, we try again at next reset\n            if (e.code === RATE_LIMIT) {\n                changeOn = addMinutes(new Date(e.nextReset), 5);\n            } else if (\n                e.code === DISABLED_TOKEN ||\n                e.code === SUSPENDED_ACCOUNT\n            ) {\n                active = false;\n            } else if (e.code === IMAGE_ERROR) {\n                // if unsplash is down try again in 30\n                changeOn = addMinutes(new Date(), 30);\n            } else {\n                // try again in 15 minutes\n                changeOn = addMinutes(new Date(), 15);\n            }\n\n            console.log(JSON.stringify({ changeOn, active }, null, 4));\n\n            console.error(e);\n            Sentry.captureException(e);\n            failed = true;\n        }\n\n        if (!isFuture(changeOn)) {\n            Sentry.captureMessage(`Change on was not in the future: ${job.user.utcOffset} of user ${job.userId}`);\n            changeOn = timeAt3am(0);\n        }\n\n        const data = {\n            status: 'scheduled',\n            changeOn,\n            active\n        };\n\n        if (!failed) {\n            console.log(`Changing next header on ${format(changeOn)} for user ${job.userId}.`);\n\n            data.count = {\n                increment: 1\n            };\n        }\n\n        await prisma.schedule.update({\n            where: {\n                userId: job.userId,\n            },\n            data\n        });\n\n        if (!failed) completed += 1;\n\n        transaction.finish();\n    }, Promise.resolve());\n\n    // wait for the queue chain to finish\n    await queue;\n\n    console.log(`Completed ${completed}/${jobs.length} jobs.`);\n};\n"]}